name: Deploy

on:
  push:
    branches: [master]

jobs:
  deploy:
    name: Terraform
    runs-on: ubuntu-latest
    steps:
    - 
      uses: chrnorm/deployment-action@v1.1.1
      name: Create GitHub deployment
      id: deployment
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        target-url: https://cluster.ironpeak.be/
        environment: production
        initial_status: in_progress
    - 
      name: Checkout code
      uses: actions/checkout@v2
    - 
      name: Checkout secrets
      uses: actions/checkout@v2
      with:
        repository: hazcod/infrastructure-state
        path: terraform/state/
        token: ${{ secrets.GITHUB_MERGE_TOKEN }}
    - 
      name: Setup terraform
      uses: hashicorp/setup-terraform@v1
      # TODO extract terraform version from dependabot-driven file
      #with:
      #  terraform_version: xxx
    - 
      name: terraform - init
      run: terraform init terraform/
    - 
      name: terraform - validate
      run: terraform validate -no-color terraform/
    - 
      name: terraform - plan
      run: terraform plan -no-color terraform/
      env:
        TF_LOG: WARN
        TF_ACTION_COMMENT: false
        TF_VAR_cloudflared_tunnel_token: ${{ secrets.TF_VAR_cloudflared_tunnel_token }}
        TF_VAR_cloudflare_email: ${{ secrets.TF_VAR_cloudflare_email }}
        TF_VAR_cloudflare_token: ${{ secrets.TF_VAR_cloudflare_token }}
        TF_VAR_github_org: ${{ secrets.TF_VAR_github_org }}
        TF_VAR_github_token: ${{ secrets.TF_VAR_github_token }}
        TF_VAR_scaleway_org: ${{ secrets. TF_VAR_scaleway_org }}
        TF_VAR_scaleway_accesstoken: ${{ secrets.TF_VAR_accesstoken }}
        TF_VAR_scaleway_secrettoken: ${{ secrets.TF_VAR_secrettoken }}
    - 
      name: terraform - apply
      run: terraform apply -no-color terraform
      env:
        TF_LOG: WARN
        TF_ACTION_COMMENT: false
        TF_VAR_cloudflared_tunnel_token: ${{ secrets.TF_VAR_cloudflared_tunnel_token }}
        TF_VAR_cloudflare_email: ${{ secrets.TF_VAR_cloudflare_email }}
        TF_VAR_cloudflare_token: ${{ secrets.TF_VAR_cloudflare_token }}
        TF_VAR_github_org: ${{ secrets.TF_VAR_github_org }}
        TF_VAR_github_token: ${{ secrets.TF_VAR_github_token }}
        TF_VAR_scaleway_org: ${{ secrets. TF_VAR_scaleway_org }}
        TF_VAR_scaleway_accesstoken: ${{ secrets.TF_VAR_accesstoken }}
        TF_VAR_scaleway_secrettoken: ${{ secrets.TF_VAR_secrettoken }}  
    - 
      uses: stefanzweifel/git-auto-commit-action@v2.5.0
      if: always()
      with:
        repository: terraform/state/
        commit_message: "feat(state): add new deployed state"
        branch: master
        file_pattern: terraform.tfstate
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_MERGE_TOKEN }}
    - 
      name: kubectl - kubernetes
      uses: steebchen/kubectl@1.0.1
      with:
        args: apply --recursive --filename kubernetes/ --kubeconfig=terraform/kubeconfig
    - 
      name: Helmsman - apply
      uses: docker://praqma/helmsman:v3.1.0
      with:
        command: helmsman -apply -kubeconfig terraform/kubeconfig -f helm/helmfile.yaml'
    - 
      name: Update deployment status (success)
      if: success()
      uses: chrnorm/deployment-status@releases/v1
      with:
        token: ${{ github.token }}
        state: "success"
        deployment_id: ${{ steps.deployment.outputs.deployment_id }}
    - 
      name: Update deployment status (failure)
      if: failure()
      uses: chrnorm/deployment-status@releases/v1
      with:
        token: ${{ github.token }}
        state: "failure"
        deployment_id: ${{ steps.deployment.outputs.deployment_id }}
