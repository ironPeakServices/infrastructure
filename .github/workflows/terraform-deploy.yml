name: Deploy

env:
  KUBECONFIG: terraform/kubeconfig

on:
  push:
    branches: [master]

jobs:
  deploy:
    name: Terraform
    runs-on: ubuntu-latest
    steps:
    - 
      uses: chrnorm/deployment-action@v1.1.1
      name: Create GitHub deployment
      id: deployment
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        target-url: https://cluster.ironpeak.be/
        environment: production
        initial_status: in_progress
    - 
      name: Checkout code
      uses: actions/checkout@v2
    - 
      name: Checkout secrets
      uses: actions/checkout@v2
      with:
        repository: hazcod/infrastructure-state
        path: terraform/state/
        token: ${{ secrets.GITHUB_MERGE_TOKEN }}
    -
      name: Extract versions
      run: |
        echo ::set-env name=k8s_version::"$(./.github/extract-version.sh .github/kubernetes/go.mod | jq -r .version | sed 's/^0/1/')"
        echo "K8S version is ${{ env.k8s_version }}"

        echo ::set-env name=istio_version::"$(./.github/extract-version.sh .github/istio/go.mod | jq -r .version)"
        echo "istio version is ${{ env.istio_version }}"

        echo ::set-env name=helm_version::"$(./.github/extract-version.sh .github/helm/go.mod | jq -r .version)"
        echo "helm version version is ${{ env.helm_version }}"

        echo ::set-env name=helmsman_version::"$(./.github/extract-version.sh .github/helmsman/go.mod | jq -r .version)"
        echo "helmsman version is ${{ env.helmsman_version }}"

        echo ::set-env name=k8sdashboard_version::"$(./.github/extract-version.sh .github/k8sdashboard/go.mod | jq -r .version)"
        echo "K8S Dashboard version is ${{ env.k8sdashboard_version }}"

        echo ::set-env name=nginxingress_version::"$(./.github/extract-version.sh .github/nginxingress/go.mod | jq -r .version | cut -d '-' -f 3)"
        echo "nginx-ingress version is ${{ env.nginxingress_version }}"
    - 
      name: Setup terraform ${{ env.terraform_version }}
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ env.terraform_version }}
    - 
      name: terraform - init
      run: terraform init terraform/
    - 
      name: terraform - validate
      run: terraform validate -no-color terraform/
    - 
      name: terraform - plan
      run: terraform plan -no-color terraform/
      env:
        TF_LOG: WARN
        TF_ACTION_COMMENT: false
        TF_VAR_kubernetes_version: ${{ env.k8s_version }}
        TF_VAR_cloudflared_tunnel_token: ${{ secrets.TF_VAR_cloudflared_tunnel_token }}
        TF_VAR_cloudflare_email: ${{ secrets.TF_VAR_cloudflare_email }}
        TF_VAR_cloudflare_token: ${{ secrets.TF_VAR_cloudflare_token }}
        TF_VAR_github_org: ${{ secrets.TF_VAR_github_org }}
        TF_VAR_github_token: ${{ secrets.TF_VAR_github_token }}
        TF_VAR_scaleway_org: ${{ secrets. TF_VAR_scaleway_org }}
        TF_VAR_scaleway_accesstoken: ${{ secrets.TF_VAR_accesstoken }}
        TF_VAR_scaleway_secrettoken: ${{ secrets.TF_VAR_secrettoken }}
    - 
      name: terraform - apply
      run: terraform apply -no-color terraform
      env:
        TF_LOG: WARN
        TF_ACTION_COMMENT: false
        TF_VAR_kubernetes_version: ${{ env.k8s_version }}
        TF_VAR_cloudflared_tunnel_token: ${{ secrets.TF_VAR_cloudflared_tunnel_token }}
        TF_VAR_cloudflare_email: ${{ secrets.TF_VAR_cloudflare_email }}
        TF_VAR_cloudflare_token: ${{ secrets.TF_VAR_cloudflare_token }}
        TF_VAR_github_org: ${{ secrets.TF_VAR_github_org }}
        TF_VAR_github_token: ${{ secrets.TF_VAR_github_token }}
        TF_VAR_scaleway_org: ${{ secrets. TF_VAR_scaleway_org }}
        TF_VAR_scaleway_accesstoken: ${{ secrets.TF_VAR_accesstoken }}
        TF_VAR_scaleway_secrettoken: ${{ secrets.TF_VAR_secrettoken }}  
    - 
      uses: stefanzweifel/git-auto-commit-action@v2.5.0
      if: always()
      with:
        repository: terraform/state/
        commit_message: "feat(state): add new deployed state"
        branch: master
        file_pattern: terraform.tfstate
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_MERGE_TOKEN }}
    -
      name: install istioctl ${{ env.istio_version }}
      run: |
        curl -L https://istio.io/downloadIstio | ISTIO_VERSION="${{ env.istio_version }}" sh -
        mv istio-*/bin/istioctl .
        kubectl create namespace istio
        ./istioctl verify-install
        ./istioctl operator init
    -
      name: kubectl apply
      run: kubectl apply --recursive --filename kubernetes/ --kubeconfig=terraform/kubeconfig
    - 
      name: install helmsman ${{ env.helmsman_version }}
      env:
        K8SDASHBOARD_VERSION: ${{ env.k8sdashboard_version }}
        NGINXINGRESS_VERSION: ${{ env.nginxingress_version }}
      run: |
        echo "installing helm..."
        DESIRED_VERSION="${{ env.helm_version }}" curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

        echo "installing helm diff plugin..."
        helm plugin install https://github.com/databus23/helm-diff

        echo "installing helmsman..."
        curl -L https://github.com/Praqma/helmsman/releases/download/v${{ env.helmsman_version }}/helmsman_${{ env.helmsman_version }}_linux_amd64.tar.gz | tar zx
        chmod +x helmsman
        ./helmsman --kubeconfig terraform/kubeconfig -f helm/helmfile.yaml
    - 
      name: Update deployment status (success)
      if: success()
      uses: chrnorm/deployment-status@releases/v1
      with:
        token: ${{ github.token }}
        state: "success"
        deployment_id: ${{ steps.deployment.outputs.deployment_id }}
    - 
      name: Update deployment status (failure)
      if: failure()
      uses: chrnorm/deployment-status@releases/v1
      with:
        token: ${{ github.token }}
        state: "failure"
        deployment_id: ${{ steps.deployment.outputs.deployment_id }}
